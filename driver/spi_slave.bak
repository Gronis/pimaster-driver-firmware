#include <stm32f0xx.h>
#include "spi_slave.h"
#include "usart.h"
#include "can.h"
#include "nocan.h"

/*****/
/*
__attribute__((always_inline)) static inline void spi_send_dma(uint8_t len, void *data) 
{
    DMA1_Channel3->CMAR = (uint32_t)(data); 
    DMA1_Channel3->CNDTR = (uint32_t)(len);
    DMA1_Channel3->CCR |= DMA_CCR_EN;
    //
    SPI1->CR2 |= SPI_CR2_TXDMAEN;
}
*/
__attribute__((always_inline)) static inline void spi_send_byte(uint8_t byte) 
{
    *(uint8_t *)&(SPI1->DR) = (uint8_t)(byte);
}
/*
__attribute__((always_inline)) static inline void spi_recv_dma(uint8_t len, void *data) 
{
    DMA1_Channel2->CMAR = (uint32_t)(data);
    DMA1_Channel2->CNDTR = (uint32_t)(len);
    DMA1_Channel2->CCR |= DMA_CCR_EN;
    //
    SPI1->CR2 |= SPI_CR2_RXDMAEN;
}
*/
__attribute__((always_inline)) static inline uint8_t spi_recv_byte(void)
{
    while ((SPI1->SR & SPI_SR_RXNE) == 0); 
    return (uint8_t)(SPI1->DR);
}



/*****/

// typedef uint8_t (*spi_transfer_cb)(uint8_t, uint8_t);  // (offset,r_value) -> w_value
// SPI_SS on PA4
// SPI1_SCK on PA5
// SPI1_MISO on PA6
// SPI1_MOSI on PA7

#if 0
static void spi_slave_configure_DMA(void)
{
    /* Enable the peripheral clock DMA1 */
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;

    /* NOTE:
     * SPI1 TX is mapped to DMA.Channel 2
     * SP11 RX is mapped to DMA.Channel 3
     */


    /* DMA1 Channel2 SPI1_RX config */
    /* (1) Peripheral address */
    /* (2) Memory address */
    /* (3) Data size */
    /* (4) Memory increment */
    /*     Peripheral to memory */
    /*     8-bit transfer */
    /*     Transfer complete IT */
    DMA1_Channel2->CPAR = (uint32_t)&(SPI1->DR); /* (1) */
    DMA1_Channel2->CMAR = 0; /* (2) */
    DMA1_Channel2->CCR |= DMA_CCR_MINC |  DMA_CCR_TCIE; /* (4) */

    /* DMA1 Channel3 SPI1_TX config */
    /* (5) Peripheral address */
    /* (7) Memory increment */
    /*     Memory to peripheral*/
    /*     8-bit transfer */    
    DMA1_Channel3->CPAR = (uint32_t)&(SPI1->DR); /* (5) */
    DMA1_Channel3->CMAR = 0;
    DMA1_Channel3->CCR |= DMA_CCR_MINC | DMA_CCR_DIR; /* (7) */
    //DMA1_Channel3->CCR |= DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_EN; /* (7) */

    /* Configure IT */
    /* (8) Set priority for DMA1_Channel2_3_IRQn */
    /* (9) Enable DMA1_Channel2_3_IRQn */
    NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1); /* (8) */
    NVIC_EnableIRQ(DMA1_Channel2_3_IRQn); /* (9) */
}
#endif

void spi_slave_configure_EXTI(void)
{
  /* (1) PA4 as source input */
  /* (2) unmask port 0 */
  /* (3) Rising edge */
  /* (4) Set priority */
  /* (5) Enable EXTI0_1_IRQn */

  SYSCFG->EXTICR[1] = (SYSCFG->EXTICR[1] & ~SYSCFG_EXTICR2_EXTI4) | SYSCFG_EXTICR2_EXTI4_PA; /* (1) */ 
  //  SYSCFG->EXTICR[0] => PA0, PB0, PC0, ... PF0 as specified in bits [0:3] of  SYSCFG_EXTICR1 
  //                    => PA1, PB1, PC1, ... PF1 as specified in bits [4:7]
  //                    ...
  //                    => PA3, PB3, PC3, ... PF3 as specified in bits [12:15]
  //
  //  SYSCFG->EXTICR[1] => PA4, PB4, PC4, ... PF4 as specified in bits [0:3] of  SYSCFG_EXTICR2 
  //  
    
  
  
  EXTI->IMR |= EXTI_IMR_MR4; /* (2) */
  // Interrupt request form line _0_ is unmasked (1)
  // SYSCFG->EXTICR selects the letter PA, PB, ... PF and here we select one or more pins 
  // for the letter  (incorrect)

  EXTI->RTSR |= EXTI_RTSR_TR4; /* (3) */ 
  // Rising edge on line _0_
  EXTI->FTSR |= EXTI_FTSR_TR4;
  // EXTI->FTSR for falling edge

  NVIC_SetPriority(EXTI4_15_IRQn, 0); /* (4) */ 
  // EXTI0_1 covers interrupts on pins Px0 and Px1
  // EXTI2_3 covers interrupts on pins Px2 and Px3
  // EXTI4_15 coverts interrupts on pins Px4, Px5, Px6, ..., Px15
  // Priority 0 is the highest (as here), priority 3 is the lowest 
  //=// NVIC_EnableIRQ(EXTI0_1_IRQn); /* (5) */ 
  NVIC_EnableIRQ(EXTI4_15_IRQn); /* (5) */ 
}

#define SPI_OK_BYTE 0x80
#define SPI_MORE_BYTE 0xA0
#define SPI_ERR_BYTE 0xFF

static uint8_t opcode;
static uint8_t offset;

void EXTI4_15_IRQHandler(void)
{
    static void *jump_table[16] = {
        &&op_start_null,          // 0
        &&op_start_reset,         // 1
        &&op_start_device_info,   // 2
        &&op_start_power_level,   // 3
        &&op_start_set_power,     // 4
        &&op_start_set_can_res,   // 5
        &&op_start_get_status,    // 6
        &&op_start_store_data,    // 7
        &&op_start_send_req,      // 8
        &&op_start_fetch_data,    // 9 
        &&op_start_recv_ack,      // 10
        &&op_start_null,          // 11
        &&op_start_null,          // 12
        &&op_start_null,          // 13
        &&op_start_null,          // 14
        &&op_start_null,          // 15
    };

    EXTI->PR |= EXTI_PR_PR4;
    if ((GPIOA->IDR & GPIO_IDR_4)==0)
    {
        SPI1->CR1 &= ((uint16_t)0xFEFF);
        opcode = spi_recv_byte() & 0xF;
        goto *jump_table[opcode];
    }
    else 
    { 
        NVIC_DisableIRQ(SPI1_IRQn); 
        while ((SPI1->SR & SPI_SR_RXNE) != 0) opcode = spi_recv_byte();
        SPI1->CR1 |= SPI_CR1_SSI;
        //DMA1_Channel3->CCR &= ~DMA_CCR_EN;
        //DMA1_Channel2->CCR &= ~DMA_CCR_EN;
        // this is needed to clear the last shifted byte.
        return;
    }

op_start_null:        // 0
    spi_send_byte(SPI_ERR_BYTE);
    goto op_finalize;

op_start_reset:       // 1
    spi_send_byte(SPI_MORE_BYTE);
   goto op_finalize;

op_start_device_info: // 2
    spi_send_byte(((uint8_t*)NOCAN)[0]);
    goto op_finalize; 

op_start_power_level: // 3
    spi_send_byte(((uint8_t*)&NOCAN->STATUS)[0]);
    goto op_finalize;

op_start_set_power:   // 4
    spi_send_byte(SPI_MORE_BYTE);
    goto op_finalize;

op_start_set_can_res: // 5
    spi_send_byte(SPI_ERR_BYTE);
    goto op_finalize; 

op_start_get_status:  // 6
    spi_send_byte(NOCAN->STATUS);
    goto op_finalize;

op_start_store_data:  // 7
    if (can_tx_current_buffer == 0)
    {
        spi_send_byte(SPI_ERR_BYTE);
        opcode = 0;
    }
    else 
    {
        spi_send_byte(SPI_MORE_BYTE);
    }
    goto op_finalize;

op_start_send_req:    // 8
    spi_send_byte(SPI_OK_BYTE);
    can_transmit_commit_buffer();
   /*
   if (can_transmit_commit_buffer()<0)
    {
        spi_send_byte(SPI_ERR_BYTE);
    }
    else
    {
        spi_send_byte(SPI_OK_BYTE);
    }
    */
    goto op_finalize;

op_start_fetch_data:  // 9
    if (can_rx_current_buffer == 0)
    {
        spi_send_byte(0xEE);
    }
    else
    {
        spi_send_byte(can_rx_current_buffer[0]);
    }
    goto op_finalize;

op_start_recv_ack:     // 10
    spi_send_byte(SPI_OK_BYTE);
    can_receive_shift_buffer();
    /*
    if (can_receive_shift_buffer()<0)
    {
        spi_send_byte(SPI_ERR_BYTE);
    }
    else
    {
        spi_send_byte(SPI_OK_BYTE);
    }*/
    goto op_finalize;
op_finalize:
    offset = 0;
    NVIC_EnableIRQ(SPI1_IRQn);
}

void SPI1_IRQHandler(void)
{
    uint8_t param;
    static void *jump_table[16] = {
        &&op_null,          // 0
        &&op_reset,         // 1
        &&op_device_info,   // 2
        &&op_power_level,   // 3
        &&op_set_power,     // 4
        &&op_set_can_res,   // 5
        &&op_get_status,    // 6
        &&op_store_data,    // 7
        &&op_send_req,      // 8
        &&op_fetch_data,    // 9 
        &&op_recv_ack,      // 10
        &&op_null,          // 11
        &&op_null,          // 12
        &&op_null,          // 13
        &&op_null,          // 14
        &&op_null,          // 15
    };


    if((SPI1->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
    {
        param = spi_recv_byte();
        offset++; 
        goto *jump_table[opcode];
    }
    return;

op_null:          // 0
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_reset:         // 1
    if (offset==1) {
        if (param == 1)
        {
            spi_send_byte(SPI_OK_BYTE);
            can_reset();
            nocan_init();
            return;
        } 
        else if (param == 2)
        {
            spi_send_byte(SPI_OK_BYTE);
            NVIC_SystemReset();
            return;
        }
    }
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_device_info:   // 2 
    // 4 bytes of signature, 2 bytes of version, 12 bytes of chip id = 18 bytes
    if (offset<sizeof(nocan_registers_t))
    {
        spi_send_byte(((uint8_t*)NOCAN)[offset]);
        return;
    }
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_power_level:   // 3
    if (offset<8) {
        spi_send_byte(((uint8_t*)&NOCAN->STATUS)[offset]);
        return;
    }
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_set_power:     // 4
    if (offset==1)
    {
        spi_send_byte(SPI_OK_BYTE);
        if (param==0)
            nocan_status_clear(NOCAN_STATUS_POWERED);
        else
            nocan_status_set(NOCAN_STATUS_POWERED);
        return;
    }
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_set_can_res:   // 5
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_get_status:    // 6
    spi_send_byte(NOCAN->STATUS);
    return;

op_store_data:    // 7
    if (can_tx_current_buffer!=0 && offset<16)
    {
        can_tx_current_buffer[offset-1] = param;
        return;
    } 
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_send_req:      // 8
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_fetch_data:    // 9 
    if (can_rx_current_buffer!=0 && offset<16) 
    {
        spi_send_byte(can_rx_current_buffer[offset]);
        return;
    }
    spi_send_byte(SPI_ERR_BYTE);
    return;

op_recv_ack:      // 10
    spi_send_byte(SPI_ERR_BYTE);
    return;

}


int spi_slave_init()
{

    /* Enable the peripheral clock of GPIOA */
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

    /* Select AF mode (10) on PA4, PA5, PA6, PA7 */
    GPIOA->MODER = (GPIOA->MODER 
            & ~(GPIO_MODER_MODER5 | GPIO_MODER_MODER6 | GPIO_MODER_MODER7))
        | (GPIO_MODER_MODER5_1| GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1);

    /* AF0 for SPI1 signals */
    GPIOA->AFR[1] = (GPIOA->AFR[1] &
            ~(GPIO_AFRL_AFRL5 | GPIO_AFRL_AFRL6 | GPIO_AFRL_AFRL7)); 


    /* Enable input for GPIO PA4 */
    // Nothing to do since default state
    GPIOA->MODER &=  ~(GPIO_MODER_MODER4); 


    /* Enable the peripheral clock SPI1 */
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

    /* Configure SPI1 in slave */
    /* nSS hard, slave, CPOL and CPHA at zero (rising first edge) */
    /* (1) RXNE IT, 8-bit Rx fifo */
    /* (2) Enable SPI1 */
    SPI1->CR2 = SPI_CR2_RXNEIE                          // Enable RX buffer not empty interrupt
        | SPI_CR2_FRXTH                                 // RXNE event generated if FIFO level = 8 bits
        | SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0    // DataSize=8 bits
        ; /* (1) */
    SPI1->CR1 |= (SPI_CR1_SPE                            // SPI enable
        | SPI_CR1_SSM)                                  // Software Slave Select
        ; /* (2) */

    /* Configure IT */
    /* (3) Set priority for SPI1_IRQn */
    /* (4) Enable SPI1_IRQn */
    NVIC_SetPriority(SPI1_IRQn, 0); /* (3) */
    //NVIC_EnableIRQ(SPI1_IRQn); /* (4) */

    //spi_slave_configure_DMA();
    spi_slave_configure_EXTI();
    return 0;
}


#if 0
void DMA1_Channel2_3_IRQHandler(void)
{
  if((DMA1->ISR & DMA_ISR_TCIF2) == DMA_ISR_TCIF2)
  {
    DMA1->IFCR |= DMA_IFCR_CTCIF2; /* Clear TC flag */

    //if (callback_op < callback_count)
    //    callback_array[callback_op].finalize_cb();
  }
}
#endif
